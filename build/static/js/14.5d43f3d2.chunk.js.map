{"version":3,"sources":["Pages/ForgetPassword.js","components/Form/Form.js"],"names":["mapDispatchToProps","forgetPassword","connect","state","alert","history","title","className","style","margin","class","initialValues","email","validationSchema","Yup","required","onSubmit","values","a","setSubmitting","resetForm","console","log","formik","label","name","type","placeholder","map","item","msg","isSubmitting","SelectBox","props","useField","field","meta","htmlFor","id","touched","error","TextInput","TextArea"],"mappings":"uNAqHMA,EAAqB,CAAEC,e,MAAAA,GAEdC,uBAJS,SAACC,GAAD,MAAY,CAAEC,MAAOD,EAAMC,SAIXJ,EAAzBE,EAvGQ,SAAC,GAAwC,IAAtCE,EAAqC,EAArCA,MAAOH,EAA8B,EAA9BA,eAA8B,EAAdI,QAC/C,OACE,gCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAYC,MAAM,oBAClB,qBAAKC,UAAU,4BAA4BC,MAAO,CAAEC,OAAQ,YAA5D,SACE,qBAAKF,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,sBAAKA,UAAU,MAAf,UAEE,qBAAKA,UAAU,qBAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,oBAAIG,MAAM,kBAAV,6BACA,mBAAGH,WAAS,EAAZ,4DAGA,qBAAKA,UAAU,gCACf,qBAAKA,UAAU,6BAAf,SACE,cAAC,IAAD,CACEI,cAAe,CACbC,MAAO,IAETC,iBAAkBC,IAAW,CAC3BF,MAAOE,MAAaC,SAAS,cAE/BC,SAAQ,uCAAE,WACRC,EADQ,oBAAAC,EAAA,6DAENC,EAFM,EAENA,cAAeC,EAFT,EAESA,UAEjBD,GAAc,GACdE,QAAQC,IAAI,aACZD,QAAQC,IAAIL,GANJ,SAQFhB,EAAegB,GARb,OAURG,IACAD,GAAc,GAXN,2CAAF,wDAPV,SAqBG,SAACI,GAEA,OADAF,QAAQC,IAAIC,GAEV,cAAC,IAAD,UACE,gCACE,qBAAKhB,UAAU,OAAf,SACE,cAAC,IAAD,CACEiB,MAAM,QACNC,KAAK,QACLC,KAAK,OACLC,YAAY,kBAGfvB,GACCA,EAAMwB,KAAI,SAACC,GACT,OACE,sBAAKtB,UAAU,cAAf,UACG,IACAsB,EAAKC,IAAK,UAInB,qBAAKvB,UAAU,OAAf,SACE,wBACEmB,KAAK,SACLnB,UAAU,oBAFZ,SAIE,iCACE,mBAAGG,MAAM,eACR,KACAa,EAAOQ,aACJ,gBACA,wCAcG,eAQvC,cAAC,IAAD,W,6LCzGOC,G,MAAY,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,MAAUS,EAAY,2BAC1BC,YAASD,GADiB,mBACzCE,EADyC,KAClCC,EADkC,KAEhD,OACE,qCACE,uBAAOC,QAASJ,EAAMK,IAAML,EAAMR,KAAlC,SAAyCD,IACzC,gDAAQjB,UAAU,8BAAiC4B,GAAWF,IAC7DG,EAAKG,SAAWH,EAAKI,MACpB,qBAAKjC,UAAU,cAAf,SAA8B6B,EAAKI,QACjC,UAKGC,EAAY,SAAC,GAAyB,IAAvBjB,EAAsB,EAAtBA,MAAUS,EAAY,2BAG1BC,YAASD,GAHiB,mBAGzCE,EAHyC,KAGlCC,EAHkC,KAIhD,OACE,qCACE,uBAAOC,QAASJ,EAAMK,IAAML,EAAMR,KAAlC,SAAyCD,IACzC,+CAAOjB,UAAU,gBAAmB4B,GAAWF,IAC9CG,EAAKG,SAAWH,EAAKI,MACpB,qBAAKjC,UAAU,cAAf,SAA8B6B,EAAKI,QACjC,SAwBGE,EAAW,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,MAAUS,EAAY,2BAGzBC,YAASD,GAHgB,mBAGxCE,EAHwC,KAGjCC,EAHiC,KAI/C,OACE,qCACE,uBAAOC,QAASJ,EAAMK,IAAML,EAAMR,KAAlC,SAAyCD,IACzC,kDAAUjB,UAAU,gBAAmB4B,GAAWF,IACjDG,EAAKG,SAAWH,EAAKI,MACpB,qBAAKjC,UAAU,cAAf,SAA8B6B,EAAKI,QACjC","file":"static/js/14.5d43f3d2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { forgetPassword } from \"../actions/auth\";\r\n\r\nconst ForgetPassword = ({ alert, forgetPassword, history }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"Forget Password\" />\r\n      <div className=\"body-content outer-top-xs\" style={{ margin: \"20px 0px\" }}>\r\n        <div className=\"m-3\">\r\n          <div className=\"container\">\r\n            <div className=\"account-content-area\">\r\n              <div className=\"row\">\r\n                {/* Sign-in */}\r\n                <div className=\"col-md-6 col-sm-6 \">\r\n                  <div className=\"create-new-account\">\r\n                    <h3 class=\"page-subheading\">Forget Password</h3>\r\n                    <p className>\r\n                      Enter your email to get a reset link at email.\r\n                    </p>\r\n                    <div className=\"social-sign-in outer-top-xs\"></div>\r\n                    <div className=\"register-form outer-top-xs\">\r\n                      <Formik\r\n                        initialValues={{\r\n                          email: \"\",\r\n                        }}\r\n                        validationSchema={Yup.object({\r\n                          email: Yup.string().required(\"Required\"),\r\n                        })}\r\n                        onSubmit={async (\r\n                          values,\r\n                          { setSubmitting, resetForm }\r\n                        ) => {\r\n                          setSubmitting(true);\r\n                          console.log(\"Submitted\");\r\n                          console.log(values);\r\n\r\n                          await forgetPassword(values);\r\n\r\n                          resetForm();\r\n                          setSubmitting(false);\r\n                        }}\r\n                      >\r\n                        {(formik) => {\r\n                          console.log(formik);\r\n                          return (\r\n                            <Form>\r\n                              <div>\r\n                                <div className=\"mb-3\">\r\n                                  <TextInput\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter Email\"\r\n                                  />\r\n                                </div>\r\n                                {alert &&\r\n                                  alert.map((item) => {\r\n                                    return (\r\n                                      <div className=\"text-danger\">\r\n                                        {\" \"}\r\n                                        {item.msg}{\" \"}\r\n                                      </div>\r\n                                    );\r\n                                  })}\r\n                                <div className=\"mt-4\">\r\n                                  <button\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-secondary\"\r\n                                  >\r\n                                    <span>\r\n                                      <i class=\"fa fa-lock\"></i>\r\n                                      {\"  \"}\r\n                                      {formik.isSubmitting\r\n                                        ? \"Processing...\"\r\n                                        : \"Send Reset Link\"}\r\n                                    </span>\r\n                                  </button>\r\n                                </div>\r\n                              </div>\r\n                            </Form>\r\n                          );\r\n                        }}\r\n                      </Formik>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Sign-in */}\r\n                {/* create a new account */}\r\n                {/* create a new account */}{\" \"}\r\n              </div>\r\n              {/* /.row */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ alert: state.alert });\r\n\r\nconst mapDispatchToProps = { forgetPassword };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgetPassword);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}