{"version":3,"sources":["Pages/MyProfile.js","components/Form/Form.js","components/MyAccountSidebar.js"],"names":["mapDispatchToProps","editUser","connect","state","auth","alert","user","title","class","className","style","padding","border","initialValues","name","email","phone","validationSchema","Yup","required","matches","min","max","onSubmit","values","a","setSubmitting","resetForm","_id","formik","console","log","label","type","placeholder","disabled","map","item","alertType","msg","margin","isSubmitting","SelectBox","props","useField","field","meta","htmlFor","id","touched","error","TextInput","TextArea","logout","background","to","href","onClick"],"mappings":"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","file":"static/js/8.85feb01b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { editUser } from \"../actions/auth\";\r\nimport MyAccountSidebar from \"../components/MyAccountSidebar\";\r\nconst MyProfile = ({ auth: { user }, editUser, alert }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"My Profile\" />\r\n      <section class=\" about-us\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              <MyAccountSidebar />\r\n            </div>\r\n\r\n            <div className=\"col-md-8 col-sm-12 col-xs-12\">\r\n              <div\r\n                className=\"about-page-cntent\"\r\n                style={{\r\n                  padding: \"30px 0px\",\r\n                  border: \"1px solid #f1f1f1\",\r\n                  padding: \"10px 20px\",\r\n                  margin: \"20px 0px\",\r\n                }}\r\n              >\r\n                <div className=\" create-new-account\">\r\n                  <h3 class=\"page-subheading\">Edit Profile</h3>\r\n                  {user && (\r\n                    <Formik\r\n                      initialValues={{\r\n                        name: user.name,\r\n                        email: user.email,\r\n                        phone: user.phone,\r\n                      }}\r\n                      validationSchema={Yup.object({\r\n                        name: Yup.string().required(\"Required\"),\r\n                        phone: Yup.string()\r\n                          .required(\"Required\")\r\n                          .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                          .min(10, \"Must be exactly 10 digits\")\r\n                          .max(10, \"Must be exactly 10 digits\"),\r\n                      })}\r\n                      onSubmit={async (\r\n                        values,\r\n                        { setSubmitting, resetForm }\r\n                      ) => {\r\n                        setSubmitting(true);\r\n                        await editUser(user._id, values);\r\n                        // resetForm();\r\n                        setSubmitting(false);\r\n                      }}\r\n                    >\r\n                      {(formik) => {\r\n                        console.log(formik);\r\n                        return (\r\n                          <Form>\r\n                            <div className=\"row\">\r\n                              <div className=\"col-md-12\">\r\n                                <TextInput\r\n                                  label=\"Name\"\r\n                                  name=\"name\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Name\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-md-12\">\r\n                                <TextInput\r\n                                  label=\"Email\"\r\n                                  name=\"email\"\r\n                                  type=\"text\"\r\n                                  disabled\r\n                                  placeholder=\"Enter Email\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"col-md-12\">\r\n                                <TextInput\r\n                                  label=\"Phone\"\r\n                                  name=\"phone\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Phone\"\r\n                                />\r\n                              </div>\r\n                              {alert &&\r\n                                alert.map((item) => {\r\n                                  return (\r\n                                    <div className={`text-${item.alertType}`}>\r\n                                      {\" \"}\r\n                                      {item.msg}{\" \"}\r\n                                    </div>\r\n                                  );\r\n                                })}\r\n                              <div className=\"col-md-12\">\r\n                                <button\r\n                                  className=\"btn btn-success \"\r\n                                  style={{ margin: \"20px 0px\" }}\r\n                                >\r\n                                  {\" \"}\r\n                                  {formik.isSubmitting\r\n                                    ? \"Saving...\"\r\n                                    : \"Save\"}{\" \"}\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          </Form>\r\n                        );\r\n                      }}\r\n                    </Formik>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ auth: state.auth, alert: state.alert });\r\n\r\nconst mapDispatchToProps = { editUser };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyProfile);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logout } from \"../actions/auth\";\r\nconst MyAccountSidebar = ({ logout }) => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"sidebar-widget\"\r\n        style={{\r\n          background: \"none 0px 0px repeat scroll rgb(251, 251, 251)\",\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-profile\">Profile</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-orders\">My Orders</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-address\">My Address</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/change-password\">Change Password</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <a href=\"#logout\" onClick={() => logout()}>\r\n              Logout\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = { logout };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountSidebar);\r\n"],"sourceRoot":""}