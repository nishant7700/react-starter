{"version":3,"sources":["components/EditAddress.js","Pages/MyAddress.js","components/Form/Form.js","components/MyAccountSidebar.js"],"names":["mapDispatchToProps","editUser","connect","state","auth","user","currentlyEditing","setIsEditing","isEditing","editing","setcurrentlyEditing","ALLPIN","useState","activeAddress","setActiveAddress","useEffect","filterData","address","filter","item","index","class","initialValues","address_1","address_2","landmark","lankmark","city","pincode","pin","validationSchema","Yup","required","onSubmit","values","a","setSubmitting","resetForm","_id","formik","console","log","className","label","name","type","placeholder","value","map","style","margin","isSubmitting","alert","deleteProduct","setDeleteProduct","deleteAddress","length","filteredAddress","num","Header","Breadcrumb","title","MyAccountSidebar","padding","border","marginBottom","onClick","editAddress","marginLeft","push","Footer","SelectBox","props","useField","field","meta","htmlFor","id","touched","error","TextInput","TextArea","logout","background","to","href"],"mappings":"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","file":"static/js/6.f856452f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextInput, SelectBox, TextArea, CheckBox } from \"./Form/Form\";\r\nimport { editUser } from \"../actions/auth\";\r\nconst EditAddress = ({\r\n  auth: { user },\r\n  editUser,\r\n  currentlyEditing,\r\n  isEditing,\r\n  editing,\r\n  setIsEditing,\r\n  setcurrentlyEditing,\r\n}) => {\r\n  const ALLPIN = [\r\n    \"Andaman and Nicobar Islands\",\r\n    \"Andhra Pradesh\",\r\n    \"Arunachal Pradesh\",\r\n    \"Assam\",\r\n    \"Bihar\",\r\n    \"Chandigarh\",\r\n    \"Chhattisgarh\",\r\n    \"Dadra and Nagar Haveli\",\r\n    \"Daman and Diu\",\r\n    \"Delhi\",\r\n    \"Goa\",\r\n    \"Gujarat\",\r\n    \"Haryana\",\r\n    \"Himachal Pradesh\",\r\n    \"Jammu and Kashmir\",\r\n    \"Jharkhand\",\r\n    \"Karnataka\",\r\n    \"Kerala\",\r\n    \"Ladakh\",\r\n    \"Lakshadweep\",\r\n    \"Madhya Pradesh\",\r\n    \"Maharashtra\",\r\n    \"Manipur\",\r\n    \"Meghalaya\",\r\n    \"Mizoram\",\r\n    \"Nagaland\",\r\n    \"Odisha\",\r\n    \"Puducherry\",\r\n    \"Punjab\",\r\n    \"Rajasthan\",\r\n    \"Sikkim\",\r\n    \"Tamil Nadu\",\r\n    \"Telangana\",\r\n    \"Tripura\",\r\n    \"Uttar Pradesh\",\r\n    \"Uttarakhand\",\r\n    \"West Bengal\",\r\n  ];\r\n  const [activeAddress, setActiveAddress] = useState(null);\r\n  useEffect(() => {\r\n    const address = user.address ? user.address : [];\r\n    const filterData = address.filter(\r\n      (item, index) => index === currentlyEditing\r\n    );\r\n    setActiveAddress(filterData[0]);\r\n  }, [currentlyEditing]);\r\n  return (\r\n    <div>\r\n      <h3 class=\"page-subheading\"> Edit Address </h3>\r\n      {activeAddress && (\r\n        <Formik\r\n          initialValues={{\r\n            address_1: activeAddress.address_1,\r\n            address_2: activeAddress.address_2,\r\n            landmark: activeAddress.lankmark,\r\n            city: activeAddress.city,\r\n            state: activeAddress.state,\r\n            pincode: activeAddress.pin,\r\n          }}\r\n          validationSchema={Yup.object({\r\n            address_1: Yup.string().required(\"Required\"),\r\n            city: Yup.string().required(\"Required\"),\r\n            state: Yup.string().required(\"Required\"),\r\n            pincode: Yup.string().required(\"Required\"),\r\n          })}\r\n          onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n            setSubmitting(true);\r\n            const address = user.address ? user.address : [];\r\n            address[currentlyEditing] = values;\r\n\r\n            await editUser(user._id, { address: address });\r\n            setcurrentlyEditing(null);\r\n            setIsEditing(false);\r\n            resetForm();\r\n            setSubmitting(false);\r\n          }}\r\n        >\r\n          {(formik) => {\r\n            console.log(formik);\r\n            return (\r\n              <Form>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-12\">\r\n                    <TextInput\r\n                      label=\"Address 1\"\r\n                      name=\"address_1\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Address 1\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <TextInput\r\n                      label=\"Address 2\"\r\n                      name=\"address_2\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Email\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <TextInput\r\n                      label=\"Landmark\"\r\n                      name=\"landmark\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Landmark\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <TextInput\r\n                      label=\"City\"\r\n                      name=\"city\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter City\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <SelectBox\r\n                      label=\"State\"\r\n                      name=\"state\"\r\n                      placeholder=\"Enter State\"\r\n                    >\r\n                      <option value=\"\"> Select State </option>\r\n                      {ALLPIN &&\r\n                        ALLPIN.map((item) => {\r\n                          return <option value={item}> {item} </option>;\r\n                        })}\r\n                    </SelectBox>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <TextInput\r\n                      label=\"Pin\"\r\n                      name=\"pincode\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Pin\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                    <button\r\n                      className=\"btn btn-success \"\r\n                      style={{ margin: \"20px 0px\" }}\r\n                    >\r\n                      {\" \"}\r\n                      {formik.isSubmitting ? \"Saving...\" : \"Edit\"}{\" \"}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  editUser,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditAddress);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { editUser } from \"../actions/auth\";\r\nimport MyAccountSidebar from \"../components/MyAccountSidebar\";\r\nimport EditAddress from \"../components/EditAddress\";\r\nconst MyAccount = ({ auth: { user }, editUser, alert }) => {\r\n  const ALLPIN = [\r\n    \"Andaman and Nicobar Islands\",\r\n    \"Andhra Pradesh\",\r\n    \"Arunachal Pradesh\",\r\n    \"Assam\",\r\n    \"Bihar\",\r\n    \"Chandigarh\",\r\n    \"Chhattisgarh\",\r\n    \"Dadra and Nagar Haveli\",\r\n    \"Daman and Diu\",\r\n    \"Delhi\",\r\n    \"Goa\",\r\n    \"Gujarat\",\r\n    \"Haryana\",\r\n    \"Himachal Pradesh\",\r\n    \"Jammu and Kashmir\",\r\n    \"Jharkhand\",\r\n    \"Karnataka\",\r\n    \"Kerala\",\r\n    \"Ladakh\",\r\n    \"Lakshadweep\",\r\n    \"Madhya Pradesh\",\r\n    \"Maharashtra\",\r\n    \"Manipur\",\r\n    \"Meghalaya\",\r\n    \"Mizoram\",\r\n    \"Nagaland\",\r\n    \"Odisha\",\r\n    \"Puducherry\",\r\n    \"Punjab\",\r\n    \"Rajasthan\",\r\n    \"Sikkim\",\r\n    \"Tamil Nadu\",\r\n    \"Telangana\",\r\n    \"Tripura\",\r\n    \"Uttar Pradesh\",\r\n    \"Uttarakhand\",\r\n    \"West Bengal\",\r\n  ];\r\n  const [deleteProduct, setDeleteProduct] = useState(false);\r\n  const deleteAddress = async (index) => {\r\n    setDeleteProduct(true);\r\n    const address = user.address ? user.address : [];\r\n    if (address.length > 0) {\r\n      const filteredAddress = address.filter((item, num) => num !== index);\r\n      await editUser(user._id, { address: filteredAddress });\r\n      setDeleteProduct(false);\r\n    }\r\n  };\r\n  const [currentlyEditing, setcurrentlyEditing] = useState(null);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n  const editAddress = (index) => {\r\n    setcurrentlyEditing(index);\r\n    setIsEditing(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"My Profile\" />\r\n      <section class=\" about-us\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              <MyAccountSidebar />\r\n            </div>\r\n\r\n            <div className=\"col-md-8 col-sm-12 col-xs-12\">\r\n              <div\r\n                className=\"about-page-cntent\"\r\n                style={{\r\n                  padding: \"30px 0px\",\r\n                  border: \"1px solid #f1f1f1\",\r\n                  padding: \"10px 20px\",\r\n                  margin: \"20px 0px\",\r\n                }}\r\n              >\r\n                <div className=\" create-new-account\">\r\n                  <h3 class=\"page-subheading\">My Saved Address</h3>\r\n                  <div className=\"row\">\r\n                    {user &&\r\n                      user.address &&\r\n                      user.address.map((item, index) => {\r\n                        return (\r\n                          <div className=\"col-md-6\">\r\n                            <div\r\n                              style={{\r\n                                border: \"1px solid #d1d1d1\",\r\n                                padding: \"10px 20px\",\r\n                                marginBottom: \"10px\",\r\n                              }}\r\n                            >\r\n                              <div> {item.address_1} </div>\r\n                              <div> {item.address_2} </div>\r\n                              <div> {item.landmark} </div>\r\n                              <div> {item.city} </div>\r\n                              <div> {item.state} </div>\r\n                              <div> {item.pincode} </div>\r\n                              <div>\r\n                                <button\r\n                                  className=\"btn btn-success\"\r\n                                  onClick={() => editAddress(index)}\r\n                                >\r\n                                  <i className=\"fa fa-edit\"></i>\r\n                                </button>\r\n                                <button\r\n                                  className=\"btn btn-danger \"\r\n                                  style={{ marginLeft: \"10px\" }}\r\n                                  onClick={() => deleteAddress(index)}\r\n                                >\r\n                                  {deleteProduct ? (\r\n                                    \"Deleting\"\r\n                                  ) : (\r\n                                    <i className=\"fa fa-trash\"></i>\r\n                                  )}\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                  {user.address &&\r\n                    user.address.length === 0 &&\r\n                    \"No address Found\"}\r\n                  <hr />\r\n                  {isEditing ? (\r\n                    <EditAddress\r\n                      currentlyEditing={currentlyEditing}\r\n                      setcurrentlyEditing={setcurrentlyEditing}\r\n                      isEditing={isEditing}\r\n                      editing={editing}\r\n                      setIsEditing={setIsEditing}\r\n                    />\r\n                  ) : (\r\n                    <>\r\n                      {\" \"}\r\n                      <h3 class=\"page-subheading\"> Add New Address </h3>\r\n                      {user && (\r\n                        <Formik\r\n                          initialValues={{\r\n                            address_1: \"\",\r\n                            address_2: \"\",\r\n                            landmark: \"\",\r\n                            city: \"\",\r\n                            state: \"\",\r\n                            pincode: \"\",\r\n                          }}\r\n                          validationSchema={Yup.object({\r\n                            address_1: Yup.string().required(\"Required\"),\r\n                            city: Yup.string().required(\"Required\"),\r\n                            state: Yup.string().required(\"Required\"),\r\n                            pincode: Yup.string().required(\"Required\"),\r\n                          })}\r\n                          onSubmit={async (\r\n                            values,\r\n                            { setSubmitting, resetForm }\r\n                          ) => {\r\n                            setSubmitting(true);\r\n                            const address = user.address ? user.address : [];\r\n                            address.push(values);\r\n                            await editUser(user._id, { address: address });\r\n                            resetForm();\r\n                            setSubmitting(false);\r\n                          }}\r\n                        >\r\n                          {(formik) => {\r\n                            console.log(formik);\r\n                            return (\r\n                              <Form>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-md-12\">\r\n                                    <TextInput\r\n                                      label=\"Address 1\"\r\n                                      name=\"address_1\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"Enter Address 1\"\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col-md-12\">\r\n                                    <TextInput\r\n                                      label=\"Address 2\"\r\n                                      name=\"address_2\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"Enter Email\"\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col-md-12\">\r\n                                    <TextInput\r\n                                      label=\"Landmark\"\r\n                                      name=\"landmark\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"Enter Landmark\"\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col-md-12\">\r\n                                    <TextInput\r\n                                      label=\"City\"\r\n                                      name=\"city\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"Enter City\"\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col-md-12\">\r\n                                    <SelectBox\r\n                                      label=\"State\"\r\n                                      name=\"state\"\r\n                                      placeholder=\"Enter State\"\r\n                                    >\r\n                                      <option value=\"\"> Select State </option>\r\n                                      {ALLPIN &&\r\n                                        ALLPIN.map((item) => {\r\n                                          return (\r\n                                            <option value={item}>\r\n                                              {\" \"}\r\n                                              {item}{\" \"}\r\n                                            </option>\r\n                                          );\r\n                                        })}\r\n                                    </SelectBox>\r\n                                  </div>\r\n                                  <div className=\"col-md-6\">\r\n                                    <TextInput\r\n                                      label=\"Pin\"\r\n                                      name=\"pincode\"\r\n                                      type=\"text\"\r\n                                      placeholder=\"Enter Pin\"\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\"col-md-12\">\r\n                                    <button\r\n                                      className=\"btn btn-success \"\r\n                                      style={{ margin: \"20px 0px\" }}\r\n                                    >\r\n                                      {\" \"}\r\n                                      {formik.isSubmitting\r\n                                        ? \"Saving...\"\r\n                                        : \"Save\"}{\" \"}\r\n                                    </button>\r\n                                  </div>\r\n                                </div>\r\n                              </Form>\r\n                            );\r\n                          }}\r\n                        </Formik>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ auth: state.auth, alert: state.alert });\r\n\r\nconst mapDispatchToProps = { editUser };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccount);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logout } from \"../actions/auth\";\r\nconst MyAccountSidebar = ({ logout }) => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"sidebar-widget\"\r\n        style={{\r\n          background: \"none 0px 0px repeat scroll rgb(251, 251, 251)\",\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-profile\">Profile</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-orders\">My Orders</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/my-address\">My Address</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <Link to=\"/change-password\">Change Password</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-flex\">\r\n          <div className=\"dash\">\r\n            <a href=\"#logout\" onClick={() => logout()}>\r\n              Logout\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = { logout };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountSidebar);\r\n"],"sourceRoot":""}