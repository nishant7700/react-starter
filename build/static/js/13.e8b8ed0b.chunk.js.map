{"version":3,"sources":["Pages/ContactUs.js","actions/contacts.js","components/Form/Form.js"],"names":["mapDispatchToProps","addContact","data","history","dispatch","a","api","post","res","setAlert","type","ADD_CONTACT","payload","CONTACTS_ERROR","response","errors","message","length","mainError","messages","forEach","error","connect","state","alert","Header","Breadcrumb","title","className","initialValues","name","email","phone","subject","validationSchema","Yup","required","matches","min","max","onSubmit","values","setSubmitting","resetForm","console","log","formik","label","placeholder","id","map","item","msg","style","fontFamily","fontSize","fontStyle","fontWeight","padding","letterSpacing","textAlign","background","color","isSubmitting","Footer","SelectBox","props","useField","field","meta","htmlFor","touched","TextInput","TextArea"],"mappings":"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","file":"static/js/13.e8b8ed0b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { addContact } from \"../actions/contacts\";\r\nconst ContactUs = ({ addContact, alert }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"Contact Us\" />\r\n      <div className=\"contact-us-area\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <h1 className=\"page-heading\">Customer service - Contact</h1>\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n              <div className=\"contact-form-box\">\r\n                <fieldset>\r\n                  <h3 className=\"page-subheading\">send a message</h3>\r\n                  <Formik\r\n                    initialValues={{\r\n                      name: \"\",\r\n                      email: \"\",\r\n                      phone: \"\",\r\n                      subject: \"\",\r\n                      message: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                      name: Yup.string().required(\"Required\"),\r\n                      email: Yup.string().required(\"Required\"),\r\n                      phone: Yup.string()\r\n                        .required(\"Required\")\r\n                        .matches(/^[0-9]+$/, \"Must be only digits\")\r\n                        .min(10, \"Must be exactly 10 digits\")\r\n                        .max(10, \"Must be exactly 10 digits\"),\r\n                      subject: Yup.string().required(\"Required\"),\r\n                    })}\r\n                    onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n                      setSubmitting(true);\r\n                      console.log(\"Submitted\");\r\n                      await addContact(values);\r\n                      resetForm();\r\n                      setSubmitting(false);\r\n                    }}\r\n                  >\r\n                    {(formik) => {\r\n                      console.log(formik);\r\n                      return (\r\n                        <Form>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-xs-12 col-md-6\">\r\n                              <p className=\"form-group\">\r\n                                <TextInput\r\n                                  label=\"Name\"\r\n                                  name=\"name\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Name\"\r\n                                  className=\"form-control grey\"\r\n                                />\r\n                              </p>\r\n                              <p className=\"form-group\">\r\n                                <TextInput\r\n                                  label=\"Email\"\r\n                                  name=\"email\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Email\"\r\n                                  className=\"form-control grey\"\r\n                                />\r\n                              </p>\r\n                              <p className=\"form-group\">\r\n                                <TextInput\r\n                                  label=\"Phone\"\r\n                                  name=\"phone\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Phone\"\r\n                                  className=\"form-control grey\"\r\n                                />\r\n                              </p>\r\n                              <p className=\"form-group\">\r\n                                <TextInput\r\n                                  label=\"Subject\"\r\n                                  name=\"subject\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Enter Subject\"\r\n                                  className=\"form-control grey\"\r\n                                />\r\n                              </p>\r\n                              <div className=\"form-group\">\r\n                                <TextArea\r\n                                  label=\"Message\"\r\n                                  name=\"message\"\r\n                                  id=\"message\"\r\n                                  className=\"form-control\"\r\n                                  placeholder=\"Enter Message\"\r\n                                />\r\n                              </div>\r\n                              {alert &&\r\n                                alert.map((item) => {\r\n                                  return (\r\n                                    <p className=\"text-success\"> {item.msg} </p>\r\n                                  );\r\n                                })}\r\n                              <div className=\"p-2\">\r\n                                <button\r\n                                  id=\"submitMessage\"\r\n                                  name=\"submitMessage\"\r\n                                  type=\"submit\"\r\n                                  style={{\r\n                                    fontFamily: \"Roboto\",\r\n                                    fontSize: 16,\r\n                                    fontStyle: \"normal\",\r\n                                    fontWeight: 700,\r\n                                    padding: \"10px 10px\",\r\n                                    letterSpacing: \"0em\",\r\n                                    textAlign: \"center\",\r\n                                    background: \"var(--heading-color)\",\r\n                                    color: \"#fff\",\r\n                                  }}\r\n                                >\r\n                                  <span>\r\n                                    {formik.isSubmitting\r\n                                      ? \"PROCESSING...\"\r\n                                      : \"SEND\"}\r\n                                    <i className=\"fa fa-chevron-right right\" />\r\n                                  </span>\r\n                                </button>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-xs-12 col-md-6\">\r\n                              <div>\r\n                                <h3> Contact Us </h3>\r\n                                <p>\r\n                                  <i className=\"fa fa-map\"></i> Shop no. 22 main\r\n                                  market old Rajender Nagar New Delhi 110060\r\n                                </p>\r\n                                <p>\r\n                                  <i className=\"fa fa-envelope\"></i>{\" \"}\r\n                                  info@rejuvaplus.com\r\n                                </p>\r\n                                <p>\r\n                                  <i className=\"fa fa-phone\"></i> 9953704519{\" \"}\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </Form>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                </fieldset>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ alert: state.alert });\r\n\r\nconst mapDispatchToProps = { addContact };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactUs);\r\n","import api from \"../utils/api\";\r\nimport {\r\n  GET_CONTACTS,\r\n  TOTAL_CONTACTS,\r\n  ADD_CONTACT,\r\n  GET_CONTACT,\r\n  RESET_CONTACT,\r\n  CONTACTS_ERROR,\r\n} from \"./types\";\r\n\r\nimport { setAlert } from \"./alert\";\r\n// Get posts\r\nexport const countContact =\r\n  ({ q, createdAt_lte, createdAt_gte }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      let query = \"/contacts/count?\";\r\n      if (q) {\r\n        let newQ = ``;\r\n        newQ += `&_q=${q}`;\r\n        query = query + newQ;\r\n      }\r\n      if (createdAt_lte) {\r\n        let newCreatedAt_gte = ``;\r\n        newCreatedAt_gte += `&createdAt_lte=${createdAt_lte}`;\r\n        query = query + newCreatedAt_gte;\r\n      }\r\n      if (createdAt_gte) {\r\n        let newCreatedAt_gte = ``;\r\n        newCreatedAt_gte += `&createdAt_gte=${createdAt_gte}`;\r\n        query = query + newCreatedAt_gte;\r\n      }\r\n\r\n      let res = await api.get(query);\r\n      dispatch({\r\n        type: TOTAL_CONTACTS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CONTACTS_ERROR,\r\n        payload: err,\r\n      });\r\n      if (err.response && err.response.data) {\r\n        const errors = err.response.data.message;\r\n        if (errors && errors.length > 0) {\r\n          const mainError = errors[0];\r\n          if (mainError.messages) {\r\n            mainError.messages.forEach((error) =>\r\n              dispatch(setAlert(error.message, \"danger\"))\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n// Get posts\r\nexport const getContacts =\r\n  ({ limit = 10, page = 1, sort = \"DESC\", q, createdAt_lte, createdAt_gte }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: RESET_CONTACT,\r\n      });\r\n      if (page) {\r\n        const start = (page - 1) * limit;\r\n        let query = `/contacts?_limit=${limit}&_start=${start}&_sort=createdAt:${sort}`;\r\n        if (q) {\r\n          const newQ = `&_q=${q}`;\r\n          query = query + newQ;\r\n        }\r\n        if (createdAt_lte) {\r\n          const newLTE = `&createdAt_lte=${createdAt_lte}`;\r\n          query = query + newLTE;\r\n        }\r\n        if (createdAt_gte) {\r\n          const newGTE = `&createdAt_gte=${createdAt_gte}`;\r\n          query = query + newGTE;\r\n        }\r\n\r\n        const res = await api.get(query);\r\n\r\n        dispatch({\r\n          type: GET_CONTACTS,\r\n          payload: res.data,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CONTACTS_ERROR,\r\n        payload: err,\r\n      });\r\n      if (err.response && err.response.data) {\r\n        const errors = err.response.data.message;\r\n        if (errors && errors.length > 0) {\r\n          const mainError = errors[0];\r\n          if (mainError.messages) {\r\n            mainError.messages.forEach((error) =>\r\n              dispatch(setAlert(error.message, \"danger\"))\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n// Get posts\r\nexport const getContact = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: RESET_CONTACT,\r\n    });\r\n    const res = await api.get(\"/contacts/\" + id);\r\n\r\n    dispatch({\r\n      type: GET_CONTACT,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: CONTACTS_ERROR,\r\n      payload: err,\r\n    });\r\n    if (err.response && err.response.data) {\r\n      const errors = err.response.data.message;\r\n      if (errors && errors.length > 0) {\r\n        const mainError = errors[0];\r\n        if (mainError.messages) {\r\n          mainError.messages.forEach((error) =>\r\n            dispatch(setAlert(error.message, \"danger\"))\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const addContact = (data, history) => async (dispatch) => {\r\n  try {\r\n    const res = await api.post(`/contacts`, data);\r\n\r\n    dispatch(setAlert(\"Contact Saved!\", \"success\"));\r\n    dispatch({\r\n      type: ADD_CONTACT,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: CONTACTS_ERROR,\r\n      payload: err,\r\n    });\r\n    if (err.response && err.response.data) {\r\n      const errors = err.response.data.message;\r\n      if (errors && errors.length > 0) {\r\n        const mainError = errors[0];\r\n        if (mainError.messages) {\r\n          mainError.messages.forEach((error) =>\r\n            dispatch(setAlert(error.message, \"danger\"))\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\nexport const editContact = (id, data, history) => async (dispatch) => {\r\n  try {\r\n    const res = await api.put(\"/contacts/\" + id, data);\r\n\r\n    dispatch(setAlert(\"Contact Updated!\", \"success\"));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: CONTACTS_ERROR,\r\n      payload: err,\r\n    });\r\n    if (err.response && err.response.data) {\r\n      const errors = err.response.data.message;\r\n      if (errors && errors.length > 0) {\r\n        const mainError = errors[0];\r\n        if (mainError.messages) {\r\n          mainError.messages.forEach((error) =>\r\n            dispatch(setAlert(error.message, \"danger\"))\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}