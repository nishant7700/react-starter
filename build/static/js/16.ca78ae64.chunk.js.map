{"version":3,"sources":["Pages/Login.js","components/Form/Form.js"],"names":["mapDispatchToProps","login","register","connect","state","alert","history","title","style","paddingBottom","className","initialValues","email","password","validationSchema","Yup","required","onSubmit","values","a","setSubmitting","resetForm","console","log","formData","identifier","formik","label","name","type","placeholder","to","map","item","alertType","msg","marginTop","class","isSubmitting","phone","confirm_password","oneOf","username","SelectBox","props","useField","field","meta","htmlFor","id","touched","error","TextInput","TextArea"],"mappings":"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","file":"static/js/16.ca78ae64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { login, register } from \"../actions/auth\";\r\n\r\nconst Login = ({ alert, login, register, history }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"Login / Register\" />\r\n      <section style={{ paddingBottom: 50 }}>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <div className=\"register-form-content\">\r\n                <h3> Login </h3>\r\n                <div className=\"login-form\">\r\n                  <Formik\r\n                    initialValues={{\r\n                      email: \"\",\r\n                      password: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                      email: Yup.string().required(\"Required\"),\r\n                      password: Yup.string().required(\"Required\"),\r\n                    })}\r\n                    onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n                      setSubmitting(true);\r\n                      console.log(\"Submitted\");\r\n                      console.log(values);\r\n                      const formData = {\r\n                        identifier: values.email,\r\n                        password: values.password,\r\n                      };\r\n\r\n                      await login(formData);\r\n                      resetForm();\r\n                      setSubmitting(false);\r\n                    }}\r\n                  >\r\n                    {(formik) => {\r\n                      console.log(formik);\r\n                      return (\r\n                        <Form>\r\n                          <div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Email\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Enter Password\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                              <Link to=\"/forget-password\">\r\n                                Forgot Password ?\r\n                              </Link>\r\n                            </div>\r\n                            {alert &&\r\n                              alert.map((item) => {\r\n                                return (\r\n                                  <div className={`text-${item.alertType}`}>\r\n                                    {\" \"}\r\n                                    {item.msg}{\" \"}\r\n                                  </div>\r\n                                );\r\n                              })}\r\n                            <div\r\n                              className=\"shopp-now\"\r\n                              style={{ marginTop: \"10px\" }}\r\n                            >\r\n                              <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-purchase\"\r\n                              >\r\n                                <span>\r\n                                  <i class=\"fa fa-lock\"></i>\r\n                                  {\"  \"}\r\n                                  {formik.isSubmitting\r\n                                    ? \"Processing...\"\r\n                                    : \"Login\"}\r\n                                </span>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </Form>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                  {/* <hr />\r\n                  <h4> OR </h4> */}\r\n                </div>\r\n                {/* <div style={{ paddingTop: \"20px\" }} className=\"text-center\">\r\n                  <div className=\"social-sign-in outer-top-xs\">\r\n                    <div>\r\n                      <a>\r\n                        <div className=\"social-image\">\r\n                          <img src=\"/images/google.png\" />\r\n                        </div>\r\n                      </a>\r\n                    </div>\r\n                    <div>\r\n                      <a>\r\n                        <div className=\"social-image\">\r\n                          <img src=\"/images/facebook.png\" />\r\n                        </div>\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <div className=\"register-form-content\">\r\n                <h3> Register </h3>\r\n                <div className=\"register-form\">\r\n                  <Formik\r\n                    initialValues={{\r\n                      email: \"\",\r\n                      name: \"\",\r\n                      phone: \"\",\r\n                      password: \"\",\r\n                      confirm_password: \"\",\r\n                    }}\r\n                    validationSchema={Yup.object({\r\n                      email: Yup.string().required(\"Required\"),\r\n                      password: Yup.string().required(\"Required\"),\r\n\r\n                      confirm_password: Yup.string()\r\n                        .required(\"Required\")\r\n                        .oneOf(\r\n                          [Yup.ref(\"password\"), null],\r\n                          \"Passwords must match\"\r\n                        ),\r\n                    })}\r\n                    onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n                      setSubmitting(true);\r\n                      console.log(\"Submitted\");\r\n                      console.log(values);\r\n\r\n                      const formData = {\r\n                        username: values.email,\r\n                        email: values.email,\r\n                        password: values.password,\r\n                        name: values.name,\r\n                        phone: values.phone,\r\n                      };\r\n                      await register(formData);\r\n                      resetForm();\r\n                      setSubmitting(false);\r\n                    }}\r\n                  >\r\n                    {(formik) => {\r\n                      console.log(formik);\r\n                      return (\r\n                        <Form>\r\n                          <div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Name\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Email\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Phone\"\r\n                                name=\"phone\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter Phone\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Enter Password\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                              <TextInput\r\n                                label=\"Confirm Password\"\r\n                                name=\"confirm_password\"\r\n                                type=\"password\"\r\n                                placeholder=\"Enter Confirm Password\"\r\n                              />\r\n                            </div>\r\n                            {alert &&\r\n                              alert.map((item) => {\r\n                                return (\r\n                                  <div className={`text-${item.alertType}`}>\r\n                                    {\" \"}\r\n                                    {item.msg}{\" \"}\r\n                                  </div>\r\n                                );\r\n                              })}\r\n                            <div className=\"mt-4 shopp-now\">\r\n                              <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-purchase\"\r\n                              >\r\n                                <span>\r\n                                  <i class=\"fa fa-user left\"></i>\r\n                                  {\"  \"}\r\n                                  {formik.isSubmitting\r\n                                    ? \"Processing...\"\r\n                                    : \"Create an account\"}\r\n                                </span>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </Form>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ alert: state.alert });\r\n\r\nconst mapDispatchToProps = { login, register };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}