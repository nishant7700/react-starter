{"version":3,"sources":["Pages/ResetPassword.js","components/Form/Form.js"],"names":["mapDispatchToProps","resetPassword","connect","state","alert","query","history","URLSearchParams","useLocation","search","useState","get","code","title","className","style","margin","class","initialValues","password","passwordConfirmation","validationSchema","Yup","required","oneOf","onSubmit","values","a","setSubmitting","resetForm","console","log","formData","formik","label","name","type","placeholder","map","item","msg","isSubmitting","SelectBox","props","useField","field","meta","htmlFor","id","touched","error","TextInput","TextArea"],"mappings":"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","file":"static/js/18.f40dcbc5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumb from \"../components/Breadcrumb\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\nimport { Form, Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  TextInput,\r\n  SelectBox,\r\n  TextArea,\r\n  CheckBox,\r\n} from \"../components/Form/Form\";\r\nimport { resetPassword } from \"../actions/auth\";\r\nimport { useLocation, useHistory, Link } from \"react-router-dom\";\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nconst ResetPassword = ({ alert, resetPassword, history }) => {\r\n  let query = useQuery();\r\n  const [code, setCode] = useState(query.get(\"code\"));\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Breadcrumb title=\"Reset Password\" />\r\n      <div className=\"body-content outer-top-xs\" style={{ margin: \"20px 0px\" }}>\r\n        <div className=\"m-3\">\r\n          <div className=\"container\">\r\n            <div className=\"account-content-area\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 col-sm-6 \">\r\n                  <div className=\"create-new-account\">\r\n                    <h3 class=\"page-subheading\">Reset Password</h3>\r\n                    <p className>Change Password</p>\r\n                    <div className=\"social-sign-in outer-top-xs\"></div>\r\n                    <div className=\"register-form outer-top-xs\">\r\n                      <Formik\r\n                        initialValues={{\r\n                          password: \"\",\r\n                          passwordConfirmation: \"\",\r\n                        }}\r\n                        validationSchema={Yup.object({\r\n                          password: Yup.string().required(\"Required\"),\r\n\r\n                          passwordConfirmation: Yup.string()\r\n                            .required(\"Required\")\r\n                            .oneOf(\r\n                              [Yup.ref(\"password\"), null],\r\n                              \"Passwords must match\"\r\n                            ),\r\n                        })}\r\n                        onSubmit={async (\r\n                          values,\r\n                          { setSubmitting, resetForm }\r\n                        ) => {\r\n                          setSubmitting(true);\r\n                          console.log(\"Submitted\");\r\n                          console.log(values);\r\n\r\n                          const formData = {\r\n                            code: code,\r\n                            password: values.password,\r\n                            passwordConfirmation: values.passwordConfirmation,\r\n                          };\r\n                          await resetPassword(formData);\r\n                          resetForm();\r\n                          setSubmitting(false);\r\n                        }}\r\n                      >\r\n                        {(formik) => {\r\n                          console.log(formik);\r\n                          return (\r\n                            <Form>\r\n                              <div>\r\n                                <div className=\"mb-3\">\r\n                                  <TextInput\r\n                                    label=\"Passowrd\"\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Enter Password\"\r\n                                  />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                  <TextInput\r\n                                    label=\"Confirm Passowrd\"\r\n                                    name=\"passwordConfirmation\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Enter Confirm Passowrd\"\r\n                                  />\r\n                                </div>\r\n                                {alert &&\r\n                                  alert.map((item) => {\r\n                                    return (\r\n                                      <div className=\"text-danger\">\r\n                                        {\" \"}\r\n                                        {item.msg}{\" \"}\r\n                                      </div>\r\n                                    );\r\n                                  })}\r\n                                <div className=\"mt-4\">\r\n                                  <button type=\"submit\" className=\"login-btn\">\r\n                                    <span>\r\n                                      <i class=\"fa fa-lock\"></i>\r\n                                      {\"  \"}\r\n                                      {formik.isSubmitting\r\n                                        ? \"Processing...\"\r\n                                        : \"Reset Password\"}\r\n                                    </span>\r\n                                  </button>\r\n                                </div>\r\n                              </div>\r\n                            </Form>\r\n                          );\r\n                        }}\r\n                      </Formik>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* /.row */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ alert: state.alert });\r\n\r\nconst mapDispatchToProps = { resetPassword };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Formik, Form, useField } from \"formik\";\r\n\r\nimport * as Yup from \"yup\";\r\nexport const SelectBox = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <select className=\"form-control custom-select\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextInputHorizontal = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col-md-2\">\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n      </div>\r\n      <div className=\"col-md-10\">\r\n        <input className=\"form-control\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"text-danger\">{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const TextArea = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <textarea className=\"form-control\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport const RadioButton = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <input type=\"radio\" className=\"form-check-input\" {...field} {...props} />\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"text-danger\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckBox = ({ children, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and also replace ErrorMessage entirely.\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input type=\"checkbox\" {...field} {...props} />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}